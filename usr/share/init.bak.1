#!/usr/bin/ash

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
[ -d /dev/pts ] || mkdir /dev/pts
[ -d /run ] || mkdir -p /run/plymouth
[ -d /run/plymouth ] || mkdir /run/plymouth
[ -d /new_root ] || mkdir /new_root

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

. /config

run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

if [ -n "$kern" ]; then
        mount "$root" /new_root
    {
        cd /new_root
        find /usr/lib/firmware/* -maxdepth 0 -exec printf '%s\n' {} + | awk -F "/" '{print $NF}' | while read f; do find ./usr/lib/firmware -name "$f*" -type d -exec find {} -type f \; ; done | cpio -H newc -o
        find /usr/lib/modules/$(uname -r) -type f -exec printf '%s\n' {} + | awk -F "/" '{print $NF}' | while read f; do find ./usr/lib/modules/$kern -name "$f*"; done | cpio -H newc -o
        cd /
        find . -type d \( -path ./dev -o -path ./new_root -o -path ./run -o -path ./sys -o -path ./proc -o -path ./usr/lib/modules/"$(uname -r)" -o -path ./usr/lib/firmware \) -prune -o -print | cpio -H newc -o
    } > /run/init.img
    launch_interactive_shell

    path=$(find /new_root/boot -name "vmlinuz-$kern")
    if [ -z $path ]; then
        path=$(find /new_root/boot -type f -name "vmlinuz*" | sort -n | tail -1)
    fi

    kexec -l $path --initrd=/run/init.img --append=root="$root"\ init=/usr/lib/systemd/systemd\ quiet\ splash\ loglevel=3
    if [ "${break}" = "y" ] || [ "${break}" = "prekexec" ]; then
        echo ":: Pre-mount break requested, type 'exit' to resume operation"
        launch_interactive_shell
    fi
    modprobe -rf ${earlymodules//,/ } $MODULES
    run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS
    umount -a
    kexec -e
fi

rootdev=$(resolve_device "$root") && root=$rootdev
unset rootdev

fsck_root

# Mount root at /new_root
"$mount_handler" /new_root

run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "$(stat -c %D /)" = "$(stat -c %D /new_root)" ]; then
    # Nothing got mounted on /new_root. This is the end, we don't know what to do anymore
    # We fall back into a shell, but the shell has now PID 1
    # This way, manual recovery is still possible.
    err "Failed to mount the real root device."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
elif [ ! -x "/new_root${init}" ]; then
    # Successfully mounted /new_root, but ${init} is missing
    # The same logic as above applies
    err "Root device mounted successfully, but ${init} does not exist."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
fi

if [ "${break}" = "postmount" ]; then
    echo ":: Post-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# this should always be the last thing we do before the switch_root.
rdlogger_stop

exec env -i \
    "TERM=$TERM" \
    /usr/bin/switch_root /new_root $init "$@"

# vim: set ft=sh ts=4 sw=4 et:
